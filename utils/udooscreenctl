#!/usr/bin/php5
<?php
/**
 * dtweb - Device Tree editor for UDOO boards
 * Copyright (C) 2015 Francesco Montefoschi <francesco.monte@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package dtweb
 * @author  Francesco Montefoschi
 * @license http://www.gnu.org/licenses/gpl-3.0.html  GNU GPL 3.0
 */
 
require "/opt/dtweb/webapp/autoloader.php";

define('ERROR_WRONG_USAGE', 1);
define('ERROR_RUN_SUPERUSER', 2);
define('ERROR_BOARD_UNSUPPORTED', 3);

if (posix_geteuid() != 0) {
    echo "This program must be run as root." . PHP_EOL;
    exit(ERROR_RUN_SUPERUSER);
}

$allowedScreens = array();
$board = Service_BoardDetector::boardFromModel();
switch ($board) {
    case 'qdl':
        $allowedScreens = array('hdmi', 'lvds7', 'lvds15');
        break;
    
    case 'neo':
        $allowedScreens = array('hdmi', 'lvds7', 'lvds15', 'headless');
        break;
}

function show_usage() {
    echo "Use this tool to get/set the screen connected to the board." . PHP_EOL . PHP_EOL;
    echo "Usage: udooscreenctl set <screentype>" . PHP_EOL;
    echo "Usage: udooscreenctl get" . PHP_EOL;
    echo "The parameter <screentype> can be: " . implode(", ", $allowedScreens) . "." . PHP_EOL;
    exit(ERROR_WRONG_USAGE);
}

function get_screen() {
    $uenvEditor = new Service_UenvEditor();
    return $uenvEditor->getEnv("video_output", "hdmi");
}

function set_screen($screen) {
    if (!in_array($screen, $allowedScreens)) {
        show_usage();
    }

    $uenvEditor = new Service_UenvEditor();
    $uenvEditor->setEnv("video_output", $screen);
    $uenvEditor->toFile();
}

switch ($_SERVER['argc']) {
    case 2:
        if ($_SERVER['argv'][1] == "get") {
            echo get_screen() . PHP_EOL;
        } else {
            show_usage();
        }
        break;
        
    case 3:
        if ($_SERVER['argv'][1] == "set") {
            set_screen($_SERVER['argv'][2]);
        } else {
            show_usage();
        }
        break;
        
    default:
        show_usage();
}

if (!in_array($_SERVER['argv'][1], $allowedScreens)) {
    show_usage();
}

$uenvEditor = new Service_UenvEditor();
$uenvEditor->setEnv("video_output", $_SERVER['argv'][1]);
$uenvEditor->toFile();

exit(0);
